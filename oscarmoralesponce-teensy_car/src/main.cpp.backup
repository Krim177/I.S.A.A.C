#include <FreeRTOS.h>
#include <task.h>
#include <semphr.h>
#include <EEPROM.h>
#include <SPI.h>


#include "led.h"
#include "config.h"
#include "autopilot.h"
#include "virtualmachine.h"
#include "memory.h"
#include "robot.h"


#define ADDRESS_ID 0
#define ROBOT_TYPE 1
#define MOTOR0_LEFT 2
#define MOTOR0_RIGHT 3
#define MOTOR1_LEFT 4
#define MOTOR1_RIGHT 5
#define MOTOR2_LEFT 6
#define MOTOR2_RIGHT 7
#define MOTOR3_LEFT 8
#define MOTOR3_RIGHT 9



SemaphoreHandle_t spiSemaphore;
SemaphoreHandle_t spiTransactionSemaphore;
MotorOffset motorOffset;

uint8_t robotType = ORTHOSUSPENSIONCAR;
uint8_t myId = 2;
uint8_t systemReady = 0;
volatile uint16_t errorCode = 0;

uint16_t getErrorCode()
{
    return errorCode;
}


uint8_t getId()
{
    return myId;
}

uint8_t getRobotType()
{
    return robotType;
}

int main() {

//                  EEPROM.write(ADDRESS_ID, 3);
           EEPROM.write(ROBOT_TYPE, ORTHOSUSPENSIONCAR);
//     if (getId() == 3)
//     {  
// 	EEPROM.write(MOTOR0_LEFT, 0);  // OFFSET Motor 0 Left 
// 	EEPROM.write(MOTOR0_RIGHT, 0);  // OFFSET Motor 0 right
// 	EEPROM.write(MOTOR1_LEFT, 0);  // OFFSET Motor 1 Left 
// 	EEPROM.write(MOTOR1_RIGHT, 0);  // OFFSET Motor 1 right
// 	EEPROM.write(MOTOR2_LEFT, 0);  // OFFSET Motor 2 Left 
// 	EEPROM.write(MOTOR2_RIGHT, 0);  // OFFSET Motor 2 right
// 	EEPROM.write(MOTOR3_LEFT, 0);  // OFFSET Motor 3 Left 
// 	EEPROM.write(MOTOR3_RIGHT, 0);  // OFFSET Motor 3 right*/
//     }
//     if (getId() == 4)
//     { 
//       EEPROM.write(MOTOR0_LEFT, 0);  // OFFSET Motor 0 Left 
//       EEPROM.write(MOTOR0_RIGHT, 0);  // OFFSET Motor 0 right
//       EEPROM.write(MOTOR1_LEFT, 0);  // OFFSET Motor 1 Left 
//       EEPROM.write(MOTOR1_RIGHT, 0);  // OFFSET Motor 1 right
//       EEPROM.write(MOTOR2_LEFT, 0);  // OFFSET Motor 2 Left 
//       EEPROM.write(MOTOR2_RIGHT, 0);  // OFFSET Motor 2 right
//       EEPROM.write(MOTOR3_LEFT, 0);  // OFFSET Motor 3 Left 
//       EEPROM.write(MOTOR3_RIGHT, 0);  // OFFSET Motor 3 right*/
//     }
     // Robot 5
//       EEPROM.write(MOTOR0_LEFT, 0);  // OFFSET Motor 0 Left 
//       EEPROM.write(MOTOR0_RIGHT, 20);  // OFFSET Motor 0 right
//       EEPROM.write(MOTOR1_LEFT, 0);  // OFFSET Motor 1 Left 
//       EEPROM.write(MOTOR1_RIGHT, 0);  // OFFSET Motor 1 right
//       EEPROM.write(MOTOR2_LEFT, 0);  // OFFSET Motor 2 Left 
//       EEPROM.write(MOTOR2_RIGHT, 20);  // OFFSET Motor 2 right
//       EEPROM.write(MOTOR3_LEFT, 0);  // OFFSET Motor 3 Left 
//       EEPROM.write(MOTOR3_RIGHT, 0);  // OFFSET Motor 3 right
// 
//      
  
    myId = EEPROM.read(ADDRESS_ID);
    robotType = EEPROM.read(ROBOT_TYPE);
    motorOffset.offset[0] = EEPROM.read(MOTOR0_LEFT);
    motorOffset.offset[1] = EEPROM.read(MOTOR0_RIGHT);
    motorOffset.offset[2] = EEPROM.read(MOTOR1_LEFT);
    motorOffset.offset[3] = EEPROM.read(MOTOR1_RIGHT);
    motorOffset.offset[4] = EEPROM.read(MOTOR2_LEFT);
    motorOffset.offset[5] = EEPROM.read(MOTOR2_RIGHT);
    motorOffset.offset[6] = EEPROM.read(MOTOR3_LEFT);
    motorOffset.offset[7] = EEPROM.read(MOTOR3_RIGHT);
  
    pinMode(13, OUTPUT);
   
#if FLOW_TASK == 1 || DWM_TASK == 1      
    SPI.begin();    
    pinMode(10, OUTPUT);
    pinMode(9, OUTPUT);
    digitalWrite(10, HIGH);
    digitalWrite(9, HIGH);

    spiSemaphore = xSemaphoreCreateMutex();
    spiTransactionSemaphore = xSemaphoreCreateMutex();
#endif
    
    Serial.begin(115200);
    pubsubInit();    
    mpuInit();
    attitudeInit();
    
#if FLOW_TASK == 1   
    flowInit();
#endif
    
#if DWM_TASK == 1  
     dwmInit();
#endif
    
    stateInit();
  
#if UART_TASK == 1
    uartCommandInit();      
    memoryInit();
#endif  
    
     pathPlanningInit();

#if NRF_TASK == 1
    nrfInit();
#endif 
     virtualMachineInit();
     autopilotInit();
     ldmInit();   
     robotInit();
///////// Testing
    if (!pubsubTest())
    {
       errorCode = 1;
    }
    
    if (!mpuTest())
    {
      errorCode |= 1 << 1;
    }
    
    if (!attitudeTest())
    {
      errorCode |= 1 << 2;
    }
      
#if FLOW_TASK == 1
    if (!flowTest())
    {
        errorCode |= 1 << 3;    
    }
#endif
        
#if DWM_TASK == 1
    if (!dwmTest())
    {
	errorCode |= 1 << 4;
    }
#endif

     

#if NRF_TASK == 1
    if (!nrfTest())
    {
       errorCode |= 1 << 7;
    }
#endif
     
    if (!stateTest())
    {
       errorCode |= 1 << 5;
    } 
       
    if (!autopilotTest())
    {
        errorCode |= 1 << 12;
    }
	
    if (!robotTest())
    {
	errorCode |= 1 << 13;
    }
     
    if (!ldmTest())
    {
       errorCode |= 1 << 6;
    }

    if (!pathPlanningTest())
    {
       errorCode |= 1 << 9;
    }

//      if (!virtualMachineTest())
//  	errorCode |= 1 << 11;
    
  
   
#if UART_TASK == 1
    if (!uartCommandTest() || !memoryTest())
    {
        errorCode |= 1 << 8;
    }
#endif    
     
    if (errorCode)   
      ledInit(); 
    
    delay(1000);

    // start scheduler, main should stop functioning here
    vTaskStartScheduler();

    for(;;);

    return 0;
}
